DEPS = deps/automeck \
       deps/depsolver \
       deps/ej \
       deps/ejson \
       deps/ibrowse \
       deps/meck \
       deps/mini_s3 \
       deps/mochiweb

all: compile eunit dialyzer

clean:
	@rebar skip_deps=true clean
	@rm -rf ebin_dialyzer

allclean:
	@rebar clean

distclean:
	@rebar skip_deps=true clean
	@rm -rf deps

compile: $(DEPS)
	@rebar compile

# Not yet since there are a *ton* of warnings that we need to weed through.
# @dialyzer -Wrace_conditions -Wunderspecs -r ebin


# There is no easy way to filter out warnings for uncooperative
# modules. Here we provide an ugly hack that allows us to regularly
# run Dialyzer and ignore the warnings that come from neotoma
# generated code. We run dialyzer against the ebin_dialyzer directory
# which is created anew for each run and has the problem modules
# (those generated by neotoma) removed.
dialyzer:
       # TODO: uncomment and deal with warnings
       # @dialyzer -Wrace_conditions -Wunderspecs -r ebin deps/ej/ebin \
       #                                             deps/mini_s3/ebin \
       #                                             deps/depsolver/ebin 
	@dialyzer -Wrace_conditions -Wunderspecs -r ebin deps/ej/ebin 

$(DEPS):
	@rebar get-deps

eunit: compile
	@rebar skip_deps=true eunit

test: eunit

tags:
	find src deps -name "*.[he]rl" -print | etags -
