#!/usr/bin/env ruby

$:.unshift File.expand_path('../../lib', __FILE__)
require 'rubygems'
require 'json'
require 'partybus'
require 'partybus/dsl_runner'
require 'partybus/migrations'

# do the following shit

# TODO: load the config from a file (or template thie binfile :D)

Partybus.config.database_connection_string   = "mysql2://root@127.0.0.1/partybus_test"
Partybus.config.database_migration_directory = "/Users/stephen/opscode/dev/mixlib-authorization/db/migrate"
Partybus.config.partybus_migration_directory = "/Users/stephen/opscode/dev/opscode-omnibus/files/upgrades"
Partybus.config.migration_state_file         = "/tmp/partybus-state"

# obtain the file lock on the migration state file
File.open(Partybus.config.migration_state_file, File::RDWR | File::CREAT) do |f|
  if f.flock(File::LOCK_EX | File::LOCK_NB)
    migration_state = Partybus::MigrationState.new(Partybus.config.migration_state_file)

    migration_files = Dir.glob("#{Partybus.config.partybus_migration_directory}/**/*.rb")

    migrations = migration_files.map {|path| Partybus::MigrationFile.new(path)}

    pending_migrations = migrations.select{ |m| m > migration_state }.sort

    # run them through the DSL
    pending_migrations.each do |migration|
      migration.run_migration
    end
  else
    # TODO log and tell them they can't run it at the same time
  end
end

