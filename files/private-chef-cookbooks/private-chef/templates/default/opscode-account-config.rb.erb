Chef::Config[:chargify_api_secret] = ''
Chef::Config[:chargify_site]       = 'opscode-preprod'

Chef::Config[:dark_launch_config_filename] = '/etc/opscode/dark_launch_features.json'
Chef::Config[:web_ui_proxy_user] = '<%= @proxy_user %>'

Merb::Config.use do |c|
  # Sets up a custom session id key which is used for the session persistence
  # cookie name.  If not specified, defaults to '_session_id'.
  # c[:session_id_key] = '_session_id'

  # The session_secret_key is only required for the cookie session store.
  c[:session_secret_key]  = '44bba2ef4e477d158b95fd5b6382b6c390a12ece'

  c[:session_store] = 'cookie'

  c[:reload_templates] = false
  c[:reload_classes]   = false

  # only set default log level if it's not been set by 'opscode-account'
  c[:log_level]  = :info

  c[:log_stream] = STDOUT
  c[:log_file]   = nil
end


# Bunny time!
Chef::Config.amqp_host '<%= node['private_chef']['rabbitmq']['vip'] %>'
Chef::Config.amqp_port '<%= node['private_chef']['rabbitmq']['node_port'] %>'
Chef::Config.amqp_user '<%= node['private_chef']['rabbitmq']['user'] %>'
Chef::Config.amqp_pass '<%= node['private_chef']['rabbitmq']['password'] %>'
Chef::Config.amqp_vhost '<%= node['private_chef']['rabbitmq']['vhost'] %>'
Chef::Config.amqp_identity ''
Chef::Config.amqp_consumer_id '<%= node['private_chef']['rabbitmq']['consumer_id'] %>'

# Couchdb time!
couchdb_uri = '<%= node['private_chef']['couchdb']['vip'] %>:<%= node['private_chef']['couchdb']['port'] %>'
account_database = 'opscode_account'
internal_database = 'opscode_account_internal'
webui_public_key = OpenSSL::PKey::RSA.new(File.read('/etc/opscode/webui_pub.pem'))
authorization_service_uri = 'http://<%= node['private_chef']['opscode-authz']['vip'] %>:<%= node['private_chef']['opscode-authz']['port'] %>'
certificate_service_uri = 'http://<%= node['private_chef']['opscode-certificate']['vip'] %>:<%= node['private_chef']['opscode-certificate']['port'] %>'

couchrest = CouchRest.new(couchdb_uri)
couchrest.database!(account_database)
couchrest.default_database = account_database

couchrest_internal = CouchRest.new(couchdb_uri)
couchrest_internal.database!(internal_database)
couchrest_internal.default_database = internal_database

Mixlib::Authorization::Config.couchdb_uri = couchdb_uri
Mixlib::Authorization::Config.default_database = couchrest.default_database
Mixlib::Authorization::Config.internal_database = couchrest_internal.default_database
Mixlib::Authorization::Config.web_ui_public_key = webui_public_key
Mixlib::Authorization::Config.authorization_service_uri = authorization_service_uri
Mixlib::Authorization::Config.certificate_service_uri = certificate_service_uri

Opscode::Mappers.connection_string = '<%= node['private_chef']['database_type'] == "postgresql" ? "postgres" : "mysql2" %>://<%= node['private_chef'][node['private_chef']['database_type']]['sql_user'] %>:<%= node['private_chef'][node['private_chef']['database_type']]['sql_password'] %>@<%= node['private_chef'][node['private_chef']['database_type']]['vip'] %>/opscode_chef'

