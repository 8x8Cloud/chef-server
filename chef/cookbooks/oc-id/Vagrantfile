# -*- mode: ruby -*-
# vi: set ft=ruby :

if ec_url = ENV['EC_URL']
  ec_filename = ec_url.match(/\/(private-chef(.+)\.\w+)/)[1]
  $script = <<SCRIPT
wget -O '#{ec_filename}' '#{ec_url}'
sudo sudo dpkg -i #{ec_filename}
sudo private-chef-ctl reconfigure
sudo cp /etc/opscode/webui_priv.pem /vagrant
SCRIPT
end

Vagrant.configure("2") do |config|

  shared_settings = {
    :data_bags_path => "#{ENV['OPSCODE_PLATFORM_REPO'] || '~/oc/opscode-platform-cookbooks'}/data_bags",
    :roles_path => "#{ENV['OPSCODE_PLATFORM_REPO'] || '~/oc/opscode-platform-cookbooks'}/roles"
  }

  config.vm.define :lb do |lb|
    lb.omnibus.chef_version = '11.4.4'
    lb.berkshelf.enabled = true
    lb.berkshelf.berksfile_path = './Berksfile'
    lb.vm.box = 'opscode-ubuntu-10.04'
    lb.vm.box_url = 'https://opscode-vm-bento.s3.amazonaws.com/vagrant/opscode_ubuntu-10.04_provisionerless.box'
    lb.vm.hostname = hostname_for(:lb)
    lb.vm.network :private_network, ip: '33.33.33.100'
    lb.vm.network :private_network, ip: '33.33.33.60'
    lb.vm.network :private_network, ip: '33.33.33.61'
    lb.vm.network :private_network, ip: '33.33.33.62'

    lb.vm.provider 'virtualbox' do |v|
      v.memory = 2048
      v.cpus = 2
    end

    lb.vm.provision :chef_solo do |chef|
      chef.data_bags_path = shared_settings[:data_bags_path]
      chef.roles_path = shared_settings[:roles_path]
      chef.json = {
        :app_environment => 'dev',
        :opscode_lb_type => 'external'
      }
      chef.run_list = [
        'recipe[aws]',
        'recipe[opscode-dev-shim]',
        'recipe[git]',
        'recipe[opscode-xdarklaunch::dev]',
        'recipe[opscode-xdarklaunch::default]',
        'recipe[opscode-lb::dev]',
        'recipe[opscode-lb]'
      ]
    end
  end

  config.vm.define :ec do |ec|
    ec.vm.box = 'opscode-ubuntu-12.04'
    ec.vm.box_url = 'https://opscode-vm-bento.s3.amazonaws.com/vagrant/opscode_ubuntu-12.04_provisionerless.box'
    ec.vm.hostname = hostname_for(:ec)
    ec.vm.network 'private_network', :ip => '33.33.33.10'
    ec.vm.provision :shell, :inline => $script if ec_url
    ec.vm.provider 'virtualbox' do |v|
      v.memory = 2048
      v.cpus = 2
    end

  end

  def hostname_for(name)
    "oc-id-#{name.to_s}"
  end

end
