#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"

$:.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib'))

require 'pp'
require 'bunny'
require 'yajl'
require 'uuidtools'

require 'opscode/expander/configuration'

Opscode::Expander.init_config(ARGV)

MESSAGES_TO_SEND = 1_000

NODE_JSON = IO.read(File.expand_path(File.dirname(__FILE__) + '/../data/sample_node.json'))
NODE = Yajl::Parser.parse(NODE_JSON)

puts "Using rabbitmq config #{Opscode::Expander.config.amqp_config.inspect}"

puts "connecting to rabbitmq"
amqp_client = Bunny.new(Opscode::Expander.config.amqp_config)
amqp_client.start

puts 'declaring queues'
queues = {}
0.upto(1023) do |vnode|
  queues[vnode] = amqp_client.queue("vnode-#{vnode}")
end
  

puts "sending #{MESSAGES_TO_SEND} messages"
start_time = Time.now
sent_messages = 0
1.upto(MESSAGES_TO_SEND) do
  index_data = {:action => :add}
  index_data[:payload] = {:item => NODE}
  index_data[:payload][:type] = :node
  index_data[:payload][:database] = :testdb

  id = UUIDTools::UUID.random_create
  vnode = id.to_i % 1024
  index_data[:payload][:id] = id.to_s

  puts "queue: vnode-#{vnode} (#{sent_messages} / #{MESSAGES_TO_SEND})"
  queues[vnode].publish(Yajl::Encoder.encode(index_data))
  sent_messages += 1
end
end_time = Time.now

total_time = end_time - start_time
rate = MESSAGES_TO_SEND.to_f / total_time
puts "done (#{total_time}s, #{rate} msg/s)"